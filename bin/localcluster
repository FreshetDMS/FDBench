#!/bin/bash -e
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This script will download, setup, start, and stop servers for Kafka, YARN, and ZooKeeper,
# as well as downloading, building and locally publishing Samza

if [ -z "$JAVA_HOME" ]; then
  if [ -x /usr/libexec/java_home ]; then
    export JAVA_HOME="$(/usr/libexec/java_home)"
  else
    echo "JAVA_HOME not set. Exiting."
    exit 1
  fi
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
FDBENCH_ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/.. && pwd )"
BASE_DIR=$(dirname $DIR)
DEPLOY_ROOT_DIR=$BASE_DIR/deploy
DOWNLOAD_CACHE_DIR=$HOME/.fdbench/download
COMMAND=$1
SYSTEM=$2

DOWNLOAD_KAFKA=http://www-us.apache.org/dist/kafka/0.10.2.1/kafka_2.11-0.10.2.1.tgz
DOWNLOAD_YARN=http://www-us.apache.org/dist/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz
DOWNLOAD_ZOOKEEPER=http://www-eu.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz

bootstrap() {
  echo "Bootstrapping the system..."
  stop_all
  rm -rf "$DEPLOY_ROOT_DIR"
  mkdir "$DEPLOY_ROOT_DIR"
  install_all
  start_all
  exit 0
}

install_all() {
  $DIR/localcluster install fdbench
  $DIR/localcluster install fdbenchsamza
  $DIR/localcluster install zookeeper
  $DIR/localcluster install yarn
  $DIR/localcluster install kafka
}

install_fdbench() {
  # We need to build fdbench and setup libs, scripts, and etc. neccessary to run benchmark jobs
  cd $FDBENCH_ROOT_DIR
  FDBENCH_VERSION="$(./gradlew -q printVersion)"
  ./gradlew -q :fdbench-yarn:distTar
  mkdir -p $DEPLOY_ROOT_DIR/yarn-package
  cp fdbench-yarn/build/distributions/fdbench-yarn-$FDBENCH_VERSION-dist.tgz $DEPLOY_ROOT_DIR/yarn-package
  mkdir -p $DEPLOY_ROOT_DIR/fdbench
  tar -xf fdbench-yarn/build/distributions/fdbench-yarn-$FDBENCH_VERSION-dist.tar.gz -C $DEPLOY_ROOT_DIR/fdbench
}

install_fdbenchsamza() {
  cd $FDBENCH_ROOT_DIR
  FDBENCH_VERSION="$(./gradlew -q printVersion)"
  ./gradlew -q :fdbench-samza:distTar
  mkdir -p $DEPLOY_ROOT_DIR/yarn-package
  cp fdbench-samza/build/distributions/fdbench-samza-$FDBENCH_VERSION-dist.tar.gz $DEPLOY_ROOT_DIR/yarn-package
  mkdir -p $DEPLOY_ROOT_DIR/fdbenchsamza
  tar -xf fdbench-samza/build/distributions/fdbench-samza-$FDBENCH_VERSION-dist.tar.gz -C $DEPLOY_ROOT_DIR/fdbenchsamza
}

install_zookeeper() {
  mkdir -p "$DEPLOY_ROOT_DIR"
  install zookeeper $DOWNLOAD_ZOOKEEPER zookeeper-3.4.6
  cp "$DEPLOY_ROOT_DIR/zookeeper/conf/zoo_sample.cfg" "$DEPLOY_ROOT_DIR/zookeeper/conf/zoo.cfg"
}

install_yarn() {
  mkdir -p "$DEPLOY_ROOT_DIR"
  install yarn $DOWNLOAD_YARN hadoop-2.7.3
  cp "$BASE_DIR/conf/yarn-site.xml" "$DEPLOY_ROOT_DIR/yarn/etc/hadoop/yarn-site.xml"
  cp "$BASE_DIR/conf/core-site.xml" "$DEPLOY_ROOT_DIR/yarn/etc/hadoop/core-site.xml"
  if [ ! -f "$HOME/.fdbench/conf/yarn-site.xml" ]; then
    mkdir -p "$HOME/.fdbench/conf"
    cp "$BASE_DIR/conf/yarn-site.xml" "$HOME/.fdbench/conf/yarn-site.xml"
  fi

  if [ ! -f "$HOME/.fdbench/conf/core-site.xml" ]; then
    mkdir -p "$HOME/.fdbench/conf"
    cp "$BASE_DIR/conf/core-site.xml" "$HOME/.fdbench/conf/core-site.xml"
  fi
}

install_kafka() {
  mkdir -p "$DEPLOY_ROOT_DIR"
  install kafka $DOWNLOAD_KAFKA kafka_2.11-0.10.2.1
  cp "$BASE_DIR/conf/server.properties" "$DEPLOY_ROOT_DIR/kafka/config/server.properties"
  # have to use SIGTERM since nohup on appears to ignore SIGINT
  # and Kafka switched to SIGINT in KAFKA-1031.
  sed -i.bak 's/SIGINT/SIGTERM/g' $DEPLOY_ROOT_DIR/kafka/bin/kafka-server-stop.sh
  # in order to simplify the wikipedia-stats example job, set topic to have just 1 partition by default
  sed -i.bak 's/^num\.partitions *=.*/num.partitions=1/' $DEPLOY_ROOT_DIR/kafka/config/server.properties
}

install() {
  DESTINATION_DIR="$DEPLOY_ROOT_DIR/$1"
  DOWNLOAD_URL=$2
  PACKAGE_DIR="$DOWNLOAD_CACHE_DIR/$3"
  PACKAGE_FILE="$DOWNLOAD_CACHE_DIR/$(basename $DOWNLOAD_URL)"
  if [ -f "$PACKAGE_FILE" ]; then
    echo "Using previously downloaded file $PACKAGE_FILE"
  else
    echo "Downloading $(basename $DOWNLOAD_URL)..."
    mkdir -p $DOWNLOAD_CACHE_DIR
    curl "$DOWNLOAD_URL" > "${PACKAGE_FILE}.tmp"
    mv "${PACKAGE_FILE}.tmp" "$PACKAGE_FILE"
  fi
  rm -rf "$DESTINATION_DIR" "$PACKAGE_DIR"
  tar -xf "$PACKAGE_FILE" -C $DOWNLOAD_CACHE_DIR
  mv "$PACKAGE_DIR" "$DESTINATION_DIR"
}

start_all() {
  $DIR/localcluster start zookeeper
  $DIR/localcluster start yarn
  $DIR/localcluster start kafka
}

start_zookeeper() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/zkServer.sh ]; then
    cd $DEPLOY_ROOT_DIR/$SYSTEM
    bin/zkServer.sh start
    cd - > /dev/null
  else
    echo 'Zookeeper is not installed. Run: bin/localcluster install zookeeper'
  fi
}

start_yarn() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh ]; then
    $DEPLOY_ROOT_DIR/$SYSTEM/bin/hdfs namenode -format
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/start-dfs.sh
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/start-yarn.sh
  else
    echo 'YARN is not installed. Run: bin/localcluster install yarn'
  fi
}

start_kafka() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/kafka-server-start.sh ]; then
    mkdir -p $DEPLOY_ROOT_DIR/$SYSTEM/logs
    cd $DEPLOY_ROOT_DIR/$SYSTEM
    nohup bin/kafka-server-start.sh config/server.properties > logs/kafka.log 2>&1 &
    cd - > /dev/null
  else
    echo 'Kafka is not installed. Run: bin/localcluster install kafka'
  fi
}

stop_all() {
  $DIR/localcluster stop kafka
  $DIR/localcluster stop yarn
  $DIR/localcluster stop zookeeper
}

stop_zookeeper() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/zkServer.sh ]; then
    cd $DEPLOY_ROOT_DIR/$SYSTEM
    bin/zkServer.sh stop
    cd - > /dev/null
  else
    echo 'Zookeeper is not installed. Run: bin/localcluster install zookeeper'
  fi
}

stop_yarn() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh ]; then
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/stop-dfs.sh
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/stop-yarn.sh
  else
    echo 'YARN is not installed. Run: bin/localcluster install yarn'
  fi
}

stop_kafka() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/kafka-server-stop.sh ]; then
    cd $DEPLOY_ROOT_DIR/$SYSTEM
    bin/kafka-server-stop.sh || true # tolerate nonzero exit status if Kafka isn't running
    cd - > /dev/null
  else
    echo 'Kafka is not installed. Run: bin/localcluster install kafka'
  fi
}

# Check arguments
if [ "$COMMAND" == "bootstrap" ] && test -z "$SYSTEM"; then
  bootstrap
  exit 0
elif (test -z "$COMMAND" && test -z "$SYSTEM") \
  || ( [ "$COMMAND" == "help" ] || test -z "$COMMAND" || test -z "$SYSTEM"); then
  echo
  echo "  Usage.."
  echo
  echo "  $ localcluster"
  echo "  $ localcluster bootstrap"
  echo "  $ localcluster install [yarn|kafka|zookeeper|fdbench|all]"
  echo "  $ localcluster start [yarn|kafka|zookeeper|all]"
  echo "  $ localcluster stop [yarn|kafka|zookeeper|all]"
  echo
  exit 1
else
  echo "EXECUTING: $COMMAND $SYSTEM"

  "$COMMAND"_"$SYSTEM"
fi