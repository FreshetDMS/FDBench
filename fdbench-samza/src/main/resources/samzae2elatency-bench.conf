benchmark {
  name = "workload-gen"
  description = "Workload generator for performance model."
  job {
    factory {
      class = "org.pathirage.fdbench.kafka.perfmodeling.SyntheticWorkloadGenerator"
    }
  }
  parallelism = 10
}
//
//metrics {
//  store {
//    factory {
//      class = ""
//    }
//    access {
//      key = ""
//      secret = ""
//    }
//  }
//}

yarn {
  package {
    path = "${projectDir}/build/distributions/fdbench-yarn-0.1-SNAPSHOT-dist.tgz"
  }
}

aws {
  bench = true
  region = "us-west-2"
  access {
    key {
      id = ""
      secret = ""
    }
  }
  s3  {
    bucket {
      prefix = ""
    }
  }

  ebs {
    volumes = "" "" ""
  }

  ec2 {
    instances = "" "" ""
  }
}

kafka {
  zookeeper {
    connect = ""
  }
  brokers = ""
}

workload {
  produce {
    topic1 {
      partitions = 4
      msgsize {
        mean = 124
        stddev = 12
        dist = "log-normal"
      }
      producers {
        producer-group-1 {
          tasks = 2
          rate = 1000
          delay = 5
        }
        producer-group-2 {
          tasks = 2
          rate = 1000
        }
      }
    }
  }

  consume {
    topic1 {
      partitions = 4
      consumers {
        consumer-group-1 {
          tasks = 2
          msgproc {
            type = "constant" // otheroption is exponential service times
            mean = 23 // time in micro or nano seconds
            stddev = 6
          }
        }

        consumer-group-2 {
          tasks = 2
          delay = 10
          msgproc {
            type = "constant" // otheroption is exponential service times
            mean = 23 // time in micro or nano seconds
            stddev = 6
          }
        }
      }
    }
  }

  replay {
    topic1 {
      partitions = 4
      replays {
        replay-group-1 {
          tasks = 2
          msgproc {
            type = "constant" // otheroption is exponential service times
            mean = 23 // time in micro or nano seconds
            stddev = 6
          }
        }

        replay-group-2 {
          tasks = 2
          msgproc {
            type = "constant" // otheroption is exponential service times
            mean = 23 // time in micro or nano seconds
            stddev = 6
          }
        }
      }
    }
  }
}