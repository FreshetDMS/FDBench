apply plugin: 'java'

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'ch.qos.logback:logback-core:1.0.13'
//    compile "org.apache.kafka" % "kafka-clients" % "0.9.0.1"
    compile 'org.apache.hadoop:hadoop-yarn-api:2.7.1'
    compile 'org.apache.hadoop:hadoop-yarn-common:2.7.1'
    compile 'org.apache.hadoop:hadoop-yarn-client:2.7.1'
    compile 'org.apache.hadoop:hadoop-common:2.7.1'
    compile 'org.apache.hadoop:hadoop-hdfs:2.7.1'
    compile 'com.googlecode.objectify:objectify:5.1.12'
    compile 'com.typesafe:config:1.3.0'
    compile 'commons-cli:commons-cli:1.3.1'
    testCompile 'junit:junit:4.12'
}
task tar(type: Tar) {
    compression = Compression.GZIP
    classifier = 'dist'

    into('bin') {
        from 'src/main/bash'
        fileMode = 0755
    }

    into('lib') {
        from configurations.runtime
    }

    into('lib') {
        from jar
    }
}

task testYarn(type: JavaExec, dependsOn: [tar]) {
    classpath = sourceSets.main.runtimeClasspath + files('/Users/mpathira/PhD/Code/vagrant-hadoop/resources/hadoop')
    main = 'org.pathirage.kafka.bench.BenchRunner'
    environment 'HADOOP_CONF_DIR', '/Users/mpathira/PhD/Code/vagrant-hadoop/resources/hadoop'
    args(['-c', '/Users/mpathira/PhD/Code/kafka-bench/src/main/resources/example.conf'])
}

task killYarnApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath + files('/Users/mpathira/PhD/Code/vagrant-hadoop/resources/hadoop')
    main = 'org.apache.hadoop.yarn.client.cli.ApplicationCLI'

    environment 'HADOOP_CONF_DIR', '/Users/mpathira/PhD/Code/vagrant-hadoop/resources/hadoop'

    if(project.hasProperty('app')) {
        println("Killing application: " + project.getProperties().get('app'))
        args(['application', '-kill', project.getProperties().get('app')])
    }
}

