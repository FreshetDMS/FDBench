experiment {
  services {
    kafka {
      ec2 {
        tag = "kafka"
        keypair_id = "key-id"
        instance_type = "r3.2xlarge"
        image = "ami-id"
        region = "us-west-2"
        security_group = "kafka"
        instances = 3
        spot_price = 0.8
        ebs_volumes = [{
          name = "/dev/xvdb"
          type = "io1"
          iops = 10000
          size = 256
          delete_on_termination = "yes"
        }]
        node_group = "kafkaaws"
        host_group = "kafkahosts"
      }

      # If there is an existing cluster
      byon {
        brokers = "node1:9092,node2:9092"
      }

      config {
        data_dir = "/disks1/kafka/data;/disk2/kafka/data"
        log = "OFF"
        version = "0.10.1.0"
        replication_factor = 1
        default_partition_count = 8
      }

      ansible {
        hosts = "localhost"
        connection = "local"
        gfacts = false
        become = false
      }
    }

    zookeeper {
      ec2 {
        keypair = "key-id"
        instance-type = "c3.xlarge"
        image = "ami-id"
        region = "us-west-2"
        security_group = "zookeeper"
        instances = 3
        spot_price = 0.5
        data_dir = ["/disks1/zk/data"]
        log_dir = ["/disk1/zk/log"]
        log = true
        version = "3.4.6"
        replication_factor = 1
        default_partition_count = 8
        ebs = {

        }
      }

      byon {
        enable = false
      }
    }
  }

  steps = [{
    // Need to use tool name instead of class name
    // Use of class is ok. class implements the playbook generation logic.
    class = "org.pathirage.fdbench.automation.InitBench"
    conf = {}
  }, {
    class = "org.pathirage.fdbench.automation.RunBench"
    conf = {}
  }, {
    class = "org.pathirage.fdbench.automation.CollectMetrics"
    conf = {}
  }]
}